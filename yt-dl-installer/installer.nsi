; YouTube Downloader GUI - Complete System Installer
; This installer downloads and installs Python, PyQt6, FFmpeg, yt-dlp, and the GUI application
; Everything is installed system-wide, not portable

; Include version definitions (generated by PowerShell script)
!include "versions.nsh"

; Include required NSIS headers
!include "MUI2.nsh"
!include "nsDialogs.nsh"
!include "LogicLib.nsh"
!include "WinVer.nsh"
!include "x64.nsh"
; Note: Using manual string manipulation for compatibility

; Application information
!define APPNAME "YouTube Downloader GUI"
!define APPVERSION "2.0"
!define DESCRIPTION "YouTube downloader with modern GUI - System Installation"
!define PUBLISHER "Your Name"
!define WEBSITE "https://github.com/yourusername/yt-dl-gui"

; Installer settings
Name "${APPNAME} ${APPVERSION}"
OutFile "YouTube-Downloader-GUI-Installer.exe"
InstallDir "${APP_INSTALL_DIR}"
RequestExecutionLevel admin  ; Requires admin for system-wide installation

; Version information
VIProductVersion "2.0.0.0"
VIAddVersionKey "ProductName" "${APPNAME}"
VIAddVersionKey "ProductVersion" "${APPVERSION}"
VIAddVersionKey "CompanyName" "${PUBLISHER}"
VIAddVersionKey "FileDescription" "${DESCRIPTION}"
VIAddVersionKey "FileVersion" "2.0.0.0"

; Modern UI Configuration
!define MUI_ABORTWARNING
; !define MUI_ICON "app.ico"  ; Commented out - add your real .ico file here
!define MUI_WELCOMEPAGE_TITLE "Welcome to ${APPNAME} Setup"
!define MUI_WELCOMEPAGE_TEXT "This installer will install ${APPNAME} and check/install required dependencies.$\r$\n$\r$\nPython must be pre-installed on your system.$\r$\n$\r$\nThe installer will:$\r$\n* Check for existing PyQt6 and FFmpeg$\r$\n* Download only missing components$\r$\n* Always update yt-dlp to latest version$\r$\n$\r$\nClick Next to continue."

!define MUI_FINISHPAGE_TITLE "Installation Complete"
!define MUI_FINISHPAGE_TEXT "${APPNAME} has been successfully installed!$\r$\n$\r$\nPyQt6, FFmpeg, and yt-dlp have been installed system-wide.$\r$\n$\r$\nYou can now launch the application from the Start Menu."
!define MUI_FINISHPAGE_RUN "$INSTDIR\YouTube-Downloader-GUI.cmd"
!define MUI_FINISHPAGE_RUN_TEXT "Launch ${APPNAME} now"

; Pages
!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_LICENSE "license.txt"  ; Add your license file
!insertmacro MUI_PAGE_COMPONENTS
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_WELCOME
!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES

; Language
!insertmacro MUI_LANGUAGE "English"

; Variables
Var FFmpegZip
Var TempDir
Var PythonExe
Var PipExe

; Initialize function
Function .onInit
    ; Check if Windows 10/11 (required for modern Python)
    ${IfNot} ${AtLeastWin10}
        MessageBox MB_ICONSTOP "This application requires Windows 10 or later."
        Abort
    ${EndIf}
    
    ; Check if 64-bit system
    ${IfNot} ${RunningX64}
        MessageBox MB_ICONSTOP "This application requires a 64-bit version of Windows."
        Abort
    ${EndIf}
    
    ; Set temp directory
    StrCpy $TempDir "$TEMP\yt-dl-gui-installer"
    CreateDirectory "$TempDir"
FunctionEnd

; Component sections
SectionGroup "Required Components" SecGroupRequired
    Section "Python (Check Required)" SecPython
        SectionIn RO  ; Read-only (required)
        Call InstallPython
    SectionEnd
    
    Section "PyQt6 (GUI Framework)" SecPyQt6
        SectionIn RO
        Call CheckPyQt6
    SectionEnd
    
    Section "FFmpeg (Video Processing)" SecFFmpeg
        SectionIn RO
        Call CheckFFmpeg
    SectionEnd
    
    Section "yt-dlp (Always Update)" SecYtDlp
        SectionIn RO
        Call InstallYtDlp
    SectionEnd
    
    Section "YouTube Downloader GUI" SecMainApp
        SectionIn RO
        Call InstallMainApp
    SectionEnd
SectionGroupEnd

SectionGroup "Optional Components" SecGroupOptional
    Section "Desktop Shortcut" SecDesktop
        CreateShortcut "$DESKTOP\${APPNAME}.lnk" "$INSTDIR\YouTube-Downloader-GUI.cmd" "" "$INSTDIR\app.ico"
    SectionEnd
    
    Section "Quick Launch Shortcut" SecQuickLaunch
        CreateShortcut "$QUICKLAUNCH\${APPNAME}.lnk" "$INSTDIR\YouTube-Downloader-GUI.cmd" "" "$INSTDIR\app.ico"
    SectionEnd
SectionGroupEnd

; Function: Check if Python is installed
Function CheckPython
    DetailPrint "Checking for Python installation..."
    
    ; Try to run python --version
    ExecWait 'python --version' $0
    ${If} $0 == 0
        DetailPrint "Python found in PATH"
        StrCpy $PythonExe "python"
        StrCpy $PipExe "pip"
        Return
    ${EndIf}
    
    ; Check common Python installation locations
    
    ; Check user AppData installations (most common for modern Python)
    ${If} ${FileExists} "$LOCALAPPDATA\Programs\Python\Python313\python.exe"
        DetailPrint "Found Python 3.13 in user directory"
        StrCpy $PythonExe "$LOCALAPPDATA\Programs\Python\Python313\python.exe"
        StrCpy $PipExe "$LOCALAPPDATA\Programs\Python\Python313\Scripts\pip.exe"
        Return
    ${EndIf}
    
    ${If} ${FileExists} "$LOCALAPPDATA\Programs\Python\Python312\python.exe"
        DetailPrint "Found Python 3.12 in user directory"
        StrCpy $PythonExe "$LOCALAPPDATA\Programs\Python\Python312\python.exe"
        StrCpy $PipExe "$LOCALAPPDATA\Programs\Python\Python312\Scripts\pip.exe"
        Return
    ${EndIf}
    
    ${If} ${FileExists} "$LOCALAPPDATA\Programs\Python\Python311\python.exe"
        DetailPrint "Found Python 3.11 in user directory"
        StrCpy $PythonExe "$LOCALAPPDATA\Programs\Python\Python311\python.exe"
        StrCpy $PipExe "$LOCALAPPDATA\Programs\Python\Python311\Scripts\pip.exe"
        Return
    ${EndIf}
    
    ; Check system-wide Program Files installations
    ${If} ${FileExists} "$PROGRAMFILES\Python313\python.exe"
        DetailPrint "Found Python 3.13 in Program Files"
        StrCpy $PythonExe "$PROGRAMFILES\Python313\python.exe"
        StrCpy $PipExe "$PROGRAMFILES\Python313\Scripts\pip.exe"
        Return
    ${EndIf}
    
    ${If} ${FileExists} "$PROGRAMFILES\Python312\python.exe"
        DetailPrint "Found Python 3.12 in Program Files"
        StrCpy $PythonExe "$PROGRAMFILES\Python312\python.exe"
        StrCpy $PipExe "$PROGRAMFILES\Python312\Scripts\pip.exe"
        Return
    ${EndIf}
    
    ${If} ${FileExists} "$PROGRAMFILES\Python311\python.exe"
        DetailPrint "Found Python 3.11 in Program Files"
        StrCpy $PythonExe "$PROGRAMFILES\Python311\python.exe"
        StrCpy $PipExe "$PROGRAMFILES\Python311\Scripts\pip.exe"
        Return
    ${EndIf}
    
    ; Python not found
    DetailPrint "Python not found on system"
    MessageBox MB_ICONSTOP "Python is not installed on this system.$\r$\n$\r$\nPlease download and install Python from:$\r$\nhttps://www.python.org/downloads/$\r$\n$\r$\nMake sure to check 'Add Python to PATH' during installation.$\r$\n$\r$\nAfter installing Python, run this installer again."
    ExecShell "open" "https://www.python.org/downloads/"
    Abort
FunctionEnd

; Function: Check Python (renamed from InstallPython)
Function InstallPython
    ; Just check if Python exists, don't install it
    Call CheckPython
    
    ; Verify Python works
    DetailPrint "Verifying Python installation..."
    ExecWait '"$PythonExe" --version' $0
    ${If} $0 != 0
        DetailPrint "Python verification failed"
        MessageBox MB_ICONSTOP "Python was found but doesn't work properly.$\r$\nPlease reinstall Python from: https://www.python.org/downloads/"
        Abort
    ${EndIf}
    
    DetailPrint "Python verification successful"
FunctionEnd

; Function: Check if PyQt6 is installed
Function CheckPyQt6
    DetailPrint "Checking for PyQt6 installation..."
    
    ; Try to import PyQt6 with better error handling
    ExecWait '"$PythonExe" -c "import sys; import PyQt6.QtCore; print(\"PyQt6 found\")"' $0
    ${If} $0 == 0
        DetailPrint "PyQt6 is already installed - skipping installation"
        Return  ; Skip installation
    ${Else}
        DetailPrint "PyQt6 not found - will install"
        Call InstallPyQt6
    ${EndIf}
FunctionEnd

; Function: Check if FFmpeg is installed  
Function CheckFFmpeg
    DetailPrint "Checking for FFmpeg installation..."
    
    ; Try to run ffmpeg -version
    ExecWait 'ffmpeg -version' $0
    ${If} $0 == 0
        DetailPrint "FFmpeg is already installed and in PATH"
        Return  ; Skip installation
    ${Else}
        DetailPrint "FFmpeg not found in PATH, will install"
        Call InstallFFmpeg
    ${EndIf}
FunctionEnd

; Function: Install PyQt6 via pip
Function InstallPyQt6
    DetailPrint "Installing PyQt6 via pip..."
    
    ; Ensure pip is available and upgrade it
    DetailPrint "Upgrading pip..."
    ExecWait '"$PipExe" install --upgrade pip' $0
    ${If} $0 != 0
        DetailPrint "Failed to upgrade pip (code: $0), continuing anyway..."
        ; Don't abort, pip might still work
    ${EndIf}
    
    ; Install PyQt6 and related packages
    DetailPrint "Installing PyQt6 (this may take several minutes)..."
    ExecWait '"$PipExe" install PyQt6 PyQt6-Qt6 requests pillow' $0
    ${If} $0 != 0
        DetailPrint "PyQt6 installation failed with code: $0"
        MessageBox MB_ICONSTOP "PyQt6 installation failed. Error code: $0"
        Abort
    ${EndIf}
    
    ; Verify PyQt6 installation
    DetailPrint "Verifying PyQt6 installation..."
    ExecWait '"$PythonExe" -c "import PyQt6; print(\"PyQt6 verification successful\")"' $0
    ${If} $0 != 0
        DetailPrint "PyQt6 verification failed with exit code: $0"
        
        ; Try alternative verification
        DetailPrint "Trying alternative PyQt6 verification..."
        ExecWait '"$PythonExe" -c "import PyQt6.QtCore"' $0
        ${If} $0 != 0
            DetailPrint "Alternative PyQt6 verification also failed"
            MessageBox MB_YESNO "PyQt6 installation verification failed.$\r$\nThis might be due to a temporary issue.$\r$\n$\r$\nDo you want to continue anyway?$\r$\n(The application might not work properly)" IDYES ContinueAnyway
            Abort
            ContinueAnyway:
            DetailPrint "User chose to continue despite PyQt6 verification failure"
        ${Else}
            DetailPrint "Alternative PyQt6 verification successful"
        ${EndIf}
    ${Else}
        DetailPrint "PyQt6 verification successful"
    ${EndIf}
    
    DetailPrint "PyQt6 installed successfully"
FunctionEnd

; Function: Install FFmpeg to system PATH
Function InstallFFmpeg
    DetailPrint "Downloading FFmpeg (latest)..."
    
    ; Download FFmpeg using PowerShell
    StrCpy $FFmpegZip "$TempDir\ffmpeg.zip"
    DetailPrint "Downloading from: ${FFMPEG_URL}"
    DetailPrint "Using PowerShell to download FFmpeg..."
    
    ExecWait 'powershell -ExecutionPolicy Bypass -Command "try { Invoke-WebRequest -Uri \"${FFMPEG_URL}\" -OutFile \"$FFmpegZip\" -TimeoutSec 300; exit 0 } catch { Write-Host \"Download failed: $$_\"; exit 1 }"' $0
    
    ${If} $0 != 0
        DetailPrint "Failed to download FFmpeg with exit code: $0"
        MessageBox MB_ICONSTOP "Failed to download FFmpeg. Exit code: $0$\r$\nPlease check your internet connection."
        Abort
    ${EndIf}
    
    ; Verify file was downloaded
    ${If} ${FileExists} "$FFmpegZip"
        DetailPrint "FFmpeg downloaded successfully"
    ${Else}
        DetailPrint "FFmpeg file not found after download"
        MessageBox MB_ICONSTOP "FFmpeg download appeared to succeed but file not found."
        Abort
    ${EndIf}
    
    DetailPrint "Extracting FFmpeg..."
    
    ; Create FFmpeg directory
    CreateDirectory "${FFMPEG_INSTALL_DIR}"
    
    ; Extract FFmpeg using PowerShell
    DetailPrint "Extracting FFmpeg..."
    ExecWait 'powershell -ExecutionPolicy Bypass -Command "Expand-Archive -Path \"$FFmpegZip\" -DestinationPath \"$TempDir\" -Force"' $0
    ${If} $0 != 0
        DetailPrint "Failed to extract FFmpeg archive"
        MessageBox MB_ICONSTOP "Failed to extract FFmpeg archive. Error code: $0"
        Abort
    ${EndIf}
    
    ; Find the extracted directory and copy binaries
    FindFirst $0 $1 "$TempDir\ffmpeg-*"
    ${If} $1 != ""
        CopyFiles "$TempDir\$1\bin\*.*" "${FFMPEG_INSTALL_DIR}\"
        FindClose $0
    ${Else}
        DetailPrint "Could not find FFmpeg binaries"
        MessageBox MB_ICONSTOP "Could not find FFmpeg binaries in the downloaded archive."
        Abort
    ${EndIf}
    
    ; Add FFmpeg to system PATH
    DetailPrint "Adding FFmpeg to system PATH..."
    
    ; Read current PATH
    ReadRegStr $0 HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment" "Path"
    
    ; Add FFmpeg to PATH (append to existing PATH)
    WriteRegExpandStr HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment" "Path" "$0;${FFMPEG_INSTALL_DIR}"
    
    ; Broadcast environment change
    SendMessage ${HWND_BROADCAST} ${WM_WININICHANGE} 0 "STR:Environment" /TIMEOUT=5000
    
    ; Verify FFmpeg installation
    ExecWait '"${FFMPEG_INSTALL_DIR}\ffmpeg.exe" -version' $0
    ${If} $0 != 0
        DetailPrint "FFmpeg verification failed"
        MessageBox MB_ICONSTOP "FFmpeg installation verification failed."
        Abort
    ${EndIf}
    
    DetailPrint "FFmpeg installed successfully"
    Delete "$FFmpegZip"
    RMDir /r "$TempDir\ffmpeg-*"
FunctionEnd

; Function: Install yt-dlp via pip
Function InstallYtDlp
    DetailPrint "Installing/updating yt-dlp via pip..."
    
    ; Install/upgrade yt-dlp (always get latest version)
    ExecWait '"$PipExe" install --upgrade yt-dlp' $0
    ${If} $0 != 0
        DetailPrint "yt-dlp installation failed with code: $0"
        MessageBox MB_ICONSTOP "yt-dlp installation failed. Error code: $0"
        Abort
    ${EndIf}
    
    ; Verify yt-dlp installation
    ExecWait '"$PythonExe" -c "import yt_dlp; print(yt_dlp.version.__version__)"' $0
    ${If} $0 != 0
        DetailPrint "yt-dlp verification failed"
        MessageBox MB_ICONSTOP "yt-dlp installation verification failed."
        Abort
    ${EndIf}
    
    DetailPrint "yt-dlp installed successfully"
FunctionEnd

; Function: Install main application
Function InstallMainApp
    DetailPrint "Installing YouTube Downloader GUI..."
    
    ; Create application directory
    CreateDirectory "$INSTDIR"
    CreateDirectory "$INSTDIR\config"
    CreateDirectory "$INSTDIR\downloads"
    CreateDirectory "$INSTDIR\cache"
    CreateDirectory "$INSTDIR\logs"
    
    ; Copy application files
    SetOutPath "$INSTDIR"
    File "YouTube-Downloader-GUI.py"
    File "app.ico"
    File "license.txt"
    
    SetOutPath "$INSTDIR\gui"
    File /r "gui\*.*"
    
    SetOutPath "$INSTDIR\downloader"
    File /r "downloader\*.*"
    
    SetOutPath "$INSTDIR\dependencies"
    File /r "dependencies\*.*"
    
    SetOutPath "$INSTDIR\config"
    File "config\*.*"
    
    ; Create executable wrapper
    DetailPrint "Creating application launcher..."
    FileOpen $0 "$INSTDIR\YouTube-Downloader-GUI.bat" w
    FileWrite $0 '@echo off$\r$\n'
    FileWrite $0 'cd /d "$INSTDIR"$\r$\n'
    FileWrite $0 '"$PythonExe" "YouTube-Downloader-GUI.py" %*$\r$\n'
    FileClose $0
    
    ; Create Python executable wrapper for cleaner execution
    FileOpen $0 "$INSTDIR\YouTube-Downloader-GUI.cmd" w
    FileWrite $0 '@echo off$\r$\n'
    FileWrite $0 'cd /d "$INSTDIR"$\r$\n'
    FileWrite $0 'start "" "$PythonExe" "YouTube-Downloader-GUI.py"$\r$\n'
    FileClose $0
    
    ; Create Start Menu shortcuts
    CreateDirectory "$SMPROGRAMS\${APPNAME}"
    CreateShortcut "$SMPROGRAMS\${APPNAME}\${APPNAME}.lnk" "$INSTDIR\YouTube-Downloader-GUI.cmd" "" "$INSTDIR\app.ico"
    CreateShortcut "$SMPROGRAMS\${APPNAME}\Uninstall ${APPNAME}.lnk" "$INSTDIR\uninstall.exe"
    
    ; Write registry entries for Add/Remove Programs
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "DisplayName" "${APPNAME}"
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "UninstallString" "$INSTDIR\uninstall.exe"
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "DisplayIcon" "$INSTDIR\YouTube-Downloader-GUI.cmd"
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "Publisher" "${PUBLISHER}"
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "DisplayVersion" "${APPVERSION}"
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "URLInfoAbout" "${WEBSITE}"
    WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "NoModify" 1
    WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "NoRepair" 1
    
    ; Create uninstaller
    WriteUninstaller "$INSTDIR\uninstall.exe"
    
    DetailPrint "YouTube Downloader GUI installed successfully"
FunctionEnd

; Cleanup function
Function .onInstSuccess
    ; Clean up temporary files
    RMDir /r "$TempDir"
    
    ; Display success message
    DetailPrint "Installation completed successfully!"
    DetailPrint "Installation complete! Python (existing), PyQt6, FFmpeg, and yt-dlp are available system-wide."
    DetailPrint "You can launch ${APPNAME} from the Start Menu."
FunctionEnd

; Uninstaller section
Section "Uninstall"
    ; Remove application files
    RMDir /r "$INSTDIR"
    
    ; Remove Start Menu entries
    RMDir /r "$SMPROGRAMS\${APPNAME}"
    
    ; Remove desktop shortcut
    Delete "$DESKTOP\${APPNAME}.lnk"
    
    ; Remove registry entries
    DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}"
    
    ; Note: We don't uninstall Python, PyQt6, FFmpeg, or yt-dlp as they might be used by other applications
    MessageBox MB_ICONINFORMATION "YouTube Downloader GUI has been uninstalled.$\r$\n$\r$\nNote: Python, PyQt6, FFmpeg, and yt-dlp remain installed system-wide and can be used by other applications."
SectionEnd